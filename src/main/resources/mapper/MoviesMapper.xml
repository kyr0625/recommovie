<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.acorn.recommovie.mapper.MoviesMapper">
	<resultMap type="Movie" id="MovieMap">
		<id column="movieId" property="movieId"/>
		<result column="movieTitle" property="movieTitle"/>
		<result column="movieYear" property="movieYear"/>
		<result column="movieCode" property="movieCode"/>
		<result column="movieStory" property="movieStory"/>
		
		<collection property="genres" javaType="java.util.ArrayList" resultMap="GenreMap"/>
		<collection property="people" javaType="java.util.ArrayList" resultMap="PersonMap"/>
	</resultMap>
	

	<resultMap type="Genre" id="GenreMap">
		<id column="genreId" property="genreId"/>
		<result column="genreName" property="genreName"/>
	</resultMap>
	
	<resultMap type="Person" id="PersonMap">
		<id column="personId" property="personId"/>
		<result column="personName" property="personName"/>
		<result column="personPosition" property="personPosition"/>
	</resultMap>

	

	<select id="selectAllMovies" resultType="Movie">
		SELECT * FROM movies
	</select>
	
	<select id="selectMovies" resultMap="MovieMap">
		SELECT m.*, mgjg.genreId, mgjg.genreName, mpjp.personId, mpjp.personName, mpjp.personPosition
			FROM movies m
			LEFT JOIN (SELECT mg.movieId, g.genreId, g.genreName FROM movieGenre mg JOIN genre g ON mg.genreId=g.genreId) mgjg ON m.movieId=mgjg.movieId
			LEFT JOIN (SELECT mp.movieId, p.personId, p.personName, p.personPosition FROM moviePeople mp JOIN people p ON mp.personId=p.personId) mpjp ON m.movieId=mpjp.movieId
			
			<trim prefix="WHERE" prefixOverrides="AND">
				<if test='movieTitle != null'>
					AND m.movieTitle like CONCAT('%',#{movieTitle, jdbcType=VARCHAR},'%')
				</if>
				<if test='personName != null'>
					AND mpjp.personName=#{personName, jdbcType=VARCHAR}
				</if>
				<if test='genreId != null'>
					AND mgjg.genreId=#{genreId, jdbcType=INTEGER}
				</if>
			</trim>
	</select>
	
	<select id="selectAllGenres" resultMap="GenreMap">
		SELECT * FROM genre
	</select>

	<select id="selectGenreIdByName" resultType="int">
		SELECT genreId FROM genre WHERE genreName=#{genreName}
	</select>

	<select id="selectMovieStoryById" resultType="string">
		SELECT movieStory FROM movies WHERE movieId=#{movieId}
	</select>

	<select id="selectMovieByTitleEqual" resultMap="MovieMap">
		SELECT m.*, mgjg.genreId, mgjg.genreName, mpjp.personId, mpjp.personName, mpjp.personPosition
			FROM movies m
			LEFT JOIN (SELECT mg.movieId, g.genreId, g.genreName FROM movieGenre mg JOIN genre g ON mg.genreId=g.genreId) mgjg ON m.movieId=mgjg.movieId
			LEFT JOIN (SELECT mp.movieId, p.personId, p.personName, p.personPosition FROM moviePeople mp JOIN people p ON mp.personId=p.personId) mpjp ON m.movieId=mpjp.movieId
			WHERE m.movieTitle=#{movieTitle};
	</select>
	<select id="selectMovieById" resultMap="MovieMap">
		SELECT m.*, mgjg.genreId, mgjg.genreName, mpjp.personId, mpjp.personName, mpjp.personPosition
			FROM movies m
			LEFT JOIN (SELECT mg.movieId, g.genreId, g.genreName FROM movieGenre mg JOIN genre g ON mg.genreId=g.genreId) mgjg ON m.movieId=mgjg.movieId
			LEFT JOIN (SELECT mp.movieId, p.personId, p.personName, p.personPosition FROM moviePeople mp JOIN people p ON mp.personId=p.personId) mpjp ON m.movieId=mpjp.movieId
			WHERE m.movieId=#{movieId};
	</select>

	<select id="selectMoviesIdByCodeList" resultType="Map" parameterType="list">
		SELECT movieCode, movieId FROM movies
			WHERE movieCode in
			<foreach collection="movieCodeList" item="movieCode" separator="," open="(" close=")">
				#{movieCode}
			</foreach>
	</select>

	<select id="selectPersonByName" resultType="Person">
		SELECT * FROM people WHERE personName=#{personName}
	</select>

	<insert id="insertMovie" parameterType="Movie">
		INSERT IGNORE INTO movies(movieTitle, movieYear, movieCode, movieStory)
			VALUES(#{movieTitle}, #{movieYear}, #{movieCode}, #{movieStory})
	</insert>

	<insert id="insertPerson" parameterType="Person">
		INSERT IGNORE INTO people(personName, personPosition)
			VALUES(#{personName}, #{personPosition})
	</insert>

	<insert id="insertMovieGenre">
		INSERT IGNORE INTO movieGenre(movieId, genreId)
			VALUES(#{movieId}, #{genreId})
	</insert>

	<insert id="insertMoviePerson">
		INSERT IGNORE INTO moviePeople(movieId, personId)
			VALUES(#{movieId}, #{personId})
	</insert>
</mapper>